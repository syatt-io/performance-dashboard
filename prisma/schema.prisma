generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Site {
  id                String   @id @default(uuid())
  name              String
  url               String   @unique
  categoryUrl       String?  @map("category_url")
  productUrl        String?  @map("product_url")
  isShopify         Boolean  @default(true) @map("is_shopify")
  monitoringEnabled Boolean  @default(true)
  checkFrequency    Int      @default(360)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  metrics                    PerformanceMetric[]
  scheduledJobs              ScheduledJob[]
  testRuns                   PerformanceTestRun[]
  recommendations            Recommendation[]
  anomalies                  Anomaly[]
  thirdPartyScriptDetections ThirdPartyScriptDetection[]

  @@map("sites")
}

model PerformanceMetric {
  id            String   @id @default(uuid())
  siteId        String
  timestamp     DateTime @default(now())
  testLocation  String?
  deviceType    String   @default("mobile")
  pageType      String   @default("homepage") @map("page_type")

  // Lighthouse scores
  performance   Int?
  accessibility Int?
  bestPractices Int?
  seo           Int?

  // Core Web Vitals
  fcp           Float? // First Contentful Paint (seconds)
  si            Float? // Speed Index (seconds)
  lcp           Float? // Largest Contentful Paint (seconds)
  tbt           Float? // Total Blocking Time (milliseconds)
  cls           Float? // Cumulative Layout Shift
  tti           Float? // Time to Interactive (seconds)
  ttfb          Float? // Time to First Byte (milliseconds)
  inp           Float? // Interaction to Next Paint (milliseconds)

  // Page metrics
  pageLoadTime  Float?
  pageSize      Int?
  requests      Int?

  // Shopify-specific metrics
  imageOptimizationScore  Float? // Image optimization score (0-100)
  themeAssetSize          Float? // Total theme asset size in bytes
  thirdPartyBlockingTime  Float? // Third-party blocking time in milliseconds

  // Detailed audit data for resource-level analysis
  auditDetails  Json? // Lighthouse audit details with specific file/resource information

  errorDetails  String?

  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([siteId, timestamp(sort: Desc)])
  @@index([siteId, deviceType, timestamp(sort: Desc)])
  @@index([timestamp(sort: Desc)])
  @@index([deviceType, timestamp(sort: Desc)])
  @@index([pageType])
  @@map("performance_metrics")
}

model ScheduledJob {
  id           String    @id @default(uuid())
  siteId       String
  jobType      String
  status       String    @default("pending")
  scheduledFor DateTime
  startedAt    DateTime?
  completedAt  DateTime?
  error        String?
  retryCount   Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([siteId, status])
  @@index([scheduledFor])
  @@map("scheduled_jobs")
}

model ApiKey {
  id        String   @id @default(uuid())
  key       String   @unique
  name      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("api_keys")
}

model PerformanceTestRun {
  id           String   @id @default(uuid())
  siteId       String   @map("site_id")
  pageType     String   @default("homepage") @map("page_type")
  pageUrl      String   @map("page_url")
  deviceType   String   @default("mobile") @map("device_type")
  runNumber    Int      @map("run_number")
  batchId      String   @map("batch_id")
  timestamp    DateTime @default(now())

  // Lighthouse scores
  performance   Int?
  accessibility Int?  @map("accessibility")
  bestPractices Int?  @map("best_practices")
  seo           Int?

  // Core Web Vitals
  fcp           Float? // First Contentful Paint (seconds)
  si            Float? // Speed Index (seconds)
  lcp           Float? // Largest Contentful Paint (seconds)
  tbt           Float? // Total Blocking Time (milliseconds)
  cls           Float? // Cumulative Layout Shift
  tti           Float? // Time to Interactive (seconds)
  ttfb          Float? // Time to First Byte (milliseconds)
  inp           Float? // Interaction to Next Paint (milliseconds)

  // Page metrics
  pageLoadTime  Float? @map("page_load_time")
  pageSize      Int?   @map("page_size")
  requests      Int?

  errorDetails  String? @map("error_details")

  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([siteId])
  @@index([batchId])
  @@index([timestamp(sort: Desc)])
  @@map("performance_test_runs")
}

model Recommendation {
  id              String   @id @default(uuid())
  siteId          String   @map("site_id")
  metricId        String?  @map("metric_id")
  severity        String   // 'critical' | 'warning' | 'info'
  category        String   // 'images' | 'javascript' | 'css' | 'fonts' | 'shopify-apps' | 'infrastructure'
  metric          String   // Which metric triggered this (LCP, CLS, etc.)
  title           String
  description     String
  actionableSteps String   @map("actionable_steps") // JSON array
  estimatedImpact String?  @map("estimated_impact")
  status          String   @default("active") // 'active' | 'resolved' | 'dismissed'
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  resolvedAt      DateTime? @map("resolved_at")

  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([siteId, status])
  @@index([siteId, createdAt(sort: Desc)])
  @@index([severity, status])
  @@map("recommendations")
}

model Anomaly {
  id                   String   @id @default(uuid())
  siteId               String   @map("site_id")
  metricId             String   @map("metric_id")
  metric               String   // Which metric (LCP, CLS, etc.)
  currentValue         Float    @map("current_value")
  expectedMin          Float    @map("expected_min")
  expectedMax          Float    @map("expected_max")
  standardDeviations   Float    @map("standard_deviations")
  confidence           Float    // 0-1
  status               String   @default("active") // 'active' | 'resolved' | 'false_positive'
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  resolvedAt           DateTime? @map("resolved_at")

  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([siteId, status])
  @@index([siteId, createdAt(sort: Desc)])
  @@index([metric, status])
  @@map("anomalies")
}

model ThirdPartyScript {
  id              String   @id @default(uuid())
  url             String   @unique // Full URL of the script
  domain          String   // Domain of the script (for grouping)
  vendor          String?  // Identified vendor/app name (e.g., "Google Analytics", "Klaviyo")
  category        String?  // Type: analytics, marketing, chat, support, payments, etc.
  isBlocking      Boolean  @default(false) @map("is_blocking") // Whether script blocks rendering
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  detections      ThirdPartyScriptDetection[]

  @@index([domain])
  @@index([vendor])
  @@index([category])
  @@map("third_party_scripts")
}

model ThirdPartyScriptDetection {
  id              String   @id @default(uuid())
  siteId          String   @map("site_id")
  scriptId        String   @map("script_id")
  metricId        String?  @map("metric_id") // Link to the PerformanceMetric
  timestamp       DateTime @default(now())
  pageType        String   @default("homepage") @map("page_type")
  pageUrl         String   @map("page_url")
  deviceType      String   @default("mobile") @map("device_type")

  // Performance impact metrics
  transferSize    Int?     @map("transfer_size") // Bytes transferred over network
  resourceSize    Int?     @map("resource_size") // Bytes uncompressed
  startTime       Float?   @map("start_time") // When it started loading (ms from navigation start)
  duration        Float?   // How long it took to load (ms)
  blockingTime    Float?   @map("blocking_time") // Main thread blocking time (ms)

  site            Site @relation(fields: [siteId], references: [id], onDelete: Cascade)
  script          ThirdPartyScript @relation(fields: [scriptId], references: [id], onDelete: Cascade)

  @@index([siteId, timestamp(sort: Desc)])
  @@index([scriptId, timestamp(sort: Desc)])
  @@index([siteId, scriptId, timestamp(sort: Desc)])
  @@index([pageType])
  @@map("third_party_script_detections")
}